using System.IO.Compression;
using System.Net;
using System.Web;
using System.Web.Http.Filters;

namespace TransportManage.Filters
{
    /// <summary>
    /// 自动识别客户端是否支持压缩，如果支持则返回压缩后的数据
    /// Attribute that can be added to controller methods to force content
    /// to be GZip encoded if the client supports it
    /// </summary>
    public class CompressContentAttribute : ActionFilterAttribute
    {
        enum CompressionType { None, Deflate, GZip }

        /// <summary>
        /// Override to compress the content that is generated by
        /// an action method.
        /// </summary>
        /// <param name="filterContext"></param>
        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)
        {
            SetPageCompression();
        }


        /// <summary>
        /// 检查请求头的 AcceptEncoding 是否支持压缩：0 不压缩；1：deflate；2：gzip
        /// </summary>
        /// <returns></returns>
        static CompressionType GetCompressionType()
        {
            var a = HttpContext.Current.Response.StatusCode;
            var b = HttpContext.Current.Response.Headers;
            string ae = HttpContext.Current.Request.Headers["Accept-Encoding"];
            if (a == (int)HttpStatusCode.OK)
            {
                return CompressionType.None;
            }
            if (string.IsNullOrEmpty(ae))
            {
                return CompressionType.None;
            }
            if (ae.Contains("deflate"))
            {
                return CompressionType.Deflate;
            }
            if (ae.Contains("gzip"))
            {
                return CompressionType.GZip;
            }
            return CompressionType.None;
        }
        /// <summary>
        /// Sets up the current page or handler to use GZip through a Response.Filter
        /// IMPORTANT:
        /// You have to call this method before any output is generated!
        /// </summary>
        static void SetPageCompression()
        {
            HttpResponse Response = HttpContext.Current.Response;
            switch (GetCompressionType())
            {
                case CompressionType.None: break;
                case CompressionType.Deflate:
                    Response.Filter = new DeflateStream(Response.Filter, CompressionMode.Compress);
                    Response.Write(Response.Filter);
                    #region II6不支持此方法,(实际上此值默认为null 也不需要移除)
                    //Response.Headers.Remove("Content-Encoding");
                    #endregion
                    Response.AppendHeader("Content-Encoding", "deflate");
                    break;
                case CompressionType.GZip:
                    Response.Filter = new GZipStream(Response.Filter, CompressionMode.Compress);
                    Response.Write(Response.Filter);
                    #region II6不支持此方法,(实际上此值默认为null 也不需要移除)
                    //Response.Headers.Remove("Content-Encoding");
                    #endregion
                    Response.AppendHeader("Content-Encoding", "gzip");
                    break;
                default:
                    break;
            }

            // Allow proxy servers to cache encoded and unencoded versions separately
            Response.AppendHeader("Vary", "Content-Encoding");
        }
    }
}